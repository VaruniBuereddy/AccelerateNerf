
Training STarted!!!!!!!!!!
Loaded blender (138, 400, 400, 4) torch.Size([40, 4, 4]) [400, 400, 555.5555155968841] ./data/nerf_synthetic/lego
Not ndc!
args.render_only:False
Begin
TRAIN views are [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99]
TEST views are [113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130
 131 132 133 134 135 136 137]
VAL views are [100 101 102 103 104 105 106 107 108 109 110 111 112]
[Config] Center cropping of size 200 x 200 is enabled until iter 500
blender_paper_lego 5 [5.648773] 0.3854759 4
iter time 0.14811
test poses shape torch.Size([25, 4, 4])
0 7.915496826171875e-05
1 10.77302360534668
2 10.78705906867981
3 10.794246196746826
4 10.800214290618896
5 10.807976484298706
6 10.811731100082397
7 10.814744472503662
8 10.857889890670776
9 10.873692035675049
10 10.878967523574829
11 10.886945009231567
12 10.884511232376099
13 10.880339622497559
14 10.88155746459961
15 10.886362791061401
16 10.886210680007935
17 10.883411645889282
[34m[1mwandb[39m[22m: Ctrl + C detected. Stopping sweep.
Traceback (most recent call last):
  File "profile_nerf.py", line 553, in run
    train(args)
  File "profile_nerf.py", line 848, in train
    render_path(torch.Tensor(poses[i_test]).to(device), hwf, K, args.chunk, render_kwargs_test, gt_imgs=images[i_test], savedir=testsavedir)
  File "profile_nerf.py", line 155, in render_path
    rgb, disp, acc, _ = render(H, W, K, chunk=chunk, c2w=c2w[:3,:4], **render_kwargs)
  File "profile_nerf.py", line 127, in render
    all_ret = batchify_rays(rays, chunk, **kwargs)
  File "profile_nerf.py", line 60, in batchify_rays
    ret = render_rays(rays_flat[i:i+chunk], **kwargs)
  File "profile_nerf.py", line 402, in render_rays
    raw = network_query_fn(pts, viewdirs, run_fn)
  File "profile_nerf.py", line 202, in <lambda>
    network_query_fn = lambda inputs, viewdirs, network_fn : run_network(inputs, viewdirs, network_fn,
  File "profile_nerf.py", line 50, in run_network
    outputs_flat = batchify(fn, netchunk)(embedded)
  File "profile_nerf.py", line 34, in ret
    return torch.cat([fn(inputs[i:i+chunk]) for i in range(0, inputs.shape[0], chunk)], 0)
  File "profile_nerf.py", line 34, in <listcomp>
    return torch.cat([fn(inputs[i:i+chunk]) for i in range(0, inputs.shape[0], chunk)], 0)
  File "/scratch/vb2386/Documents/nerf-pytorch/venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/scratch/vb2386/Documents/nerf-pytorch/venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/scratch/vb2386/Documents/nerf-pytorch/run_nerf_helpers.py", line 100, in forward
    h = self.pts_linears[i](h)
  File "/scratch/vb2386/Documents/nerf-pytorch/venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/scratch/vb2386/Documents/nerf-pytorch/venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/scratch/vb2386/Documents/nerf-pytorch/venv/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 116, in forward
    return F.linear(input, self.weight, self.bias)
Exception